LibEBA Embedable Bit Array

Toying with making an implementation suitable for small cpus.

This is just a learning exercise, although perhaps it may be useful.


Usage:
------

https://github.com/ericherman/libeba/blob/master/demos/sieve-of-eratosthenes.c

There is no magic to the 'eba_new' and 'eba_free', only convience.
You can make the code marginally smaller by defining "EBA_SKIP_EBA_NEW".

In fact, there is not magic to the 'eba_set' or 'eba_get', rather they
simply make the indexing a bit in a byte array easier, as well as do the
bit-fiddling so I don't have to look it up or think hard.

If targeting something like an stm or avr chip, the source should be
easy to drop into a project, then modify to remove references to the C
standard library.

If you do not need to worry about byte order, you may wish to avoid
endian-ness checking in order to speed things up by compiling with
"EBA_SKIP_ENDIAN" defined.

If you never plan to use any of the shifting functions, you can avoid
compiling any of them by defining "EBA_SKIP_SHIFTS".

If you plan to use the shifting functions, but do not want to use the
standard C library, you may either define your own "Eba_memcpy" or use
an dumb one that is provided by defining "EBA_DIY_MEMCPY"

If you do not wish to reference stddef.h you must defined
"EBA_SIZE_TYPE" e.g.: -DEBA_SIZE_TYPE="unsigned long int"

If your platform is weird or you do not wish to reference limits.h,
you can define "EBA_CHAR_BIT" to 8 or a larger number.


Packaging
---------
autoreconf -iv &&
 ./configure &&
 make &&
 make distcheck &&
 echo "Success."


License
-------
GNU Lesser General Public License (LGPL), version 3 or later.
See COPYING and COPYING.LESSER for details.
